[default]
warehouse=COMPUTE_WH
model_dir=model
releases_dir=releases

[queries]

release_history=SELECT NVL(L.COMMIT, R.COMMIT) AS COMMIT,
                    NVL(L.FILE_NAME, R.FILE_NAME) AS FILE_NAME,
                    NVL(L.INSTALLED_BY, R.INSTALLED_BY) AS INSTALLED_BY,
                    NVL(L.INSTALLED_ON, R.INSTALLED_ON) AS INSTALLED_ON,
                        L.COMMIT AS BRANCH,
                        R.COMMIT AS PROD
                FROM {RELEASE_TABLE} L
                FULL OUTER JOIN {SF_PROD_NAME}.{RELEASE_TABLE} R ON 
                	L.COMMIT = R.COMMIT
                        AND L.FILE_NAME = R.FILE_NAME
                ORDER BY INSTALLED_ON ASC;

get_base_commit=SELECT COMMIT
                FROM {RELEASE_TABLE}
                ORDER BY INSTALLED_ON DESC
                LIMIT 1;

insert_release_entry=INSERT INTO {RELEASE_TABLE}(COMMIT, FILE_NAME)
                VALUES('{commit}', '{filename}');


autocommit=ALTER SESSION SET AUTOCOMMIT = FALSE;
transaction_abort=ALTER SESSION SET TRANSACTION_ABORT_ON_ERROR = TRUE;
transaction_begin=BEGIN TRANSACTION;
commit=COMMIT;

clone_exists=SELECT COUNT(*) FROM INFORMATION_SCHEMA.DATABASES WHERE DATABASE_NAME = '{newdb}'
create_clone=CREATE OR REPLACE TRANSIENT DATABASE {newdb} CLONE {prod};

get_dev_clones=SELECT DATABASE_NAME, CREATED, LAST_ALTERED
            FROM INFORMATION_SCHEMA.DATABASES
            WHERE DATABASE_NAME LIKE '_DEV%%'
            ORDER BY CREATED;

get_altered_objects=WITH CLONE_CREATION AS (
		SELECT TIMESTAMPADD('minute', 1, CREATED) AS DT
		FROM INFORMATION_SCHEMA.DATABASES
		WHERE DATABASE_NAME = '{db}'
	),
	TBL AS ( 
		SELECT TABLE_SCHEMA, TABLE_NAME, 'TABLE', LAST_ALTERED, NULL AS DEFINITION
		FROM INFORMATION_SCHEMA.TABLES
		WHERE TABLE_SCHEMA != 'INFORMATION_SCHEMA'
			AND TABLE_TYPE = 'BASE TABLE'
			AND LAST_ALTERED > (SELECT DT FROM CLONE_CREATION)),
	FUNC AS (
		SELECT FUNCTION_SCHEMA, FUNCTION_NAME, 'FUNCTION', LAST_ALTERED, FUNCTION_DEFINITION
		FROM INFORMATION_SCHEMA.FUNCTIONS
		WHERE FUNCTION_SCHEMA != 'INFORMATION_SCHEMA'
			AND LAST_ALTERED > (SELECT DT FROM CLONE_CREATION)),
	FFS AS (
		SELECT FILE_FORMAT_SCHEMA, FILE_FORMAT_NAME, 'FILE_FORMAT', LAST_ALTERED, NULL
		FROM INFORMATION_SCHEMA.FILE_FORMATS
		WHERE FILE_FORMAT_SCHEMA != 'INFORMATION_SCHEMA'
			AND LAST_ALTERED > (SELECT DT FROM CLONE_CREATION)),
	EXTT AS (
		SELECT TABLE_SCHEMA, TABLE_NAME, 'EXT TABLE', LAST_ALTERED, NULL
		FROM INFORMATION_SCHEMA.EXTERNAL_TABLES
		WHERE TABLE_SCHEMA != 'INFORMATION_SCHEMA'
			AND LAST_ALTERED > (SELECT DT FROM CLONE_CREATION)),
	PIPES AS (
		SELECT PIPE_SCHEMA, PIPE_NAME, 'PIPE', LAST_ALTERED, DEFINITION
		FROM INFORMATION_SCHEMA.PIPES
		WHERE PIPE_SCHEMA != 'INFORMATION_SCHEMA'
			AND LAST_ALTERED > (SELECT DT FROM CLONE_CREATION)),
	PROCEDURES AS (
		SELECT PROCEDURE_SCHEMA, PROCEDURE_NAME, 'PROCEDURE', LAST_ALTERED, PROCEDURE_DEFINITION
		FROM INFORMATION_SCHEMA.PROCEDURES
		WHERE PROCEDURE_SCHEMA != 'INFORMATION_SCHEMA'
			AND LAST_ALTERED > (SELECT DT FROM CLONE_CREATION)),
	SQCS AS (
		SELECT SEQUENCE_SCHEMA, SEQUENCE_NAME, 'SEQUENCE', LAST_ALTERED, NULL
		FROM INFORMATION_SCHEMA.SEQUENCES
		WHERE SEQUENCE_SCHEMA != 'INFORMATION_SCHEMA'
			AND LAST_ALTERED > (SELECT DT FROM CLONE_CREATION)),
	STAGS AS (
		SELECT STAGE_SCHEMA, STAGE_NAME, 'STAGE', LAST_ALTERED, NULL
		FROM INFORMATION_SCHEMA.STAGES
		WHERE STAGE_SCHEMA != 'INFORMATION_SCHEMA'
			AND LAST_ALTERED > (SELECT DT FROM CLONE_CREATION)),
	V AS (
		SELECT TABLE_SCHEMA, TABLE_NAME, 'VIEW', LAST_ALTERED, VIEW_DEFINITION
		FROM INFORMATION_SCHEMA.VIEWS
		WHERE TABLE_SCHEMA != 'INFORMATION_SCHEMA'
			AND LAST_ALTERED > (SELECT DT FROM CLONE_CREATION))
    SELECT * FROM TBL      UNION
    SELECT * FROM FUNC     UNION
    SELECT * FROM FFS      UNION
    SELECT * FROM EXTT     UNION
    SELECT * FROM PIPES    UNION
    SELECT * FROM SQCS     UNION
    SELECT * FROM STAGS    UNION
    SELECT * FROM V        UNION
    SELECT * FROM PROCEDURES
    ORDER BY LAST_ALTERED DESC;

get_all_objects=WITH TBL AS ( 
		SELECT TABLE_SCHEMA, TABLE_NAME, REPLACE(TABLE_TYPE, 'BASE ', '') as "TYPE", LAST_ALTERED
		FROM INFORMATION_SCHEMA.TABLES
		WHERE TABLE_SCHEMA != 'INFORMATION_SCHEMA'),
	FUNC AS (
		SELECT FUNCTION_SCHEMA, FUNCTION_NAME, 'FUNCTION', LAST_ALTERED
		FROM INFORMATION_SCHEMA.FUNCTIONS
		WHERE FUNCTION_SCHEMA != 'INFORMATION_SCHEMA'),
	FFS AS (
		SELECT FILE_FORMAT_SCHEMA, FILE_FORMAT_NAME, 'FILE_FORMAT', LAST_ALTERED
		FROM INFORMATION_SCHEMA.FILE_FORMATS
		WHERE FILE_FORMAT_SCHEMA != 'INFORMATION_SCHEMA'),
	EXTT AS (
		SELECT TABLE_SCHEMA, TABLE_NAME, 'EXT TABLE', LAST_ALTERED
		FROM INFORMATION_SCHEMA.EXTERNAL_TABLES
		WHERE TABLE_SCHEMA != 'INFORMATION_SCHEMA'),
	PIPES AS (
		SELECT PIPE_SCHEMA, PIPE_NAME, 'PIPE', LAST_ALTERED
		FROM INFORMATION_SCHEMA.PIPES
		WHERE PIPE_SCHEMA != 'INFORMATION_SCHEMA'),
	PROCEDURES AS (
		SELECT PROCEDURE_SCHEMA, PROCEDURE_NAME, 'PROCEDURE', LAST_ALTERED
		FROM INFORMATION_SCHEMA.PROCEDURES
		WHERE PROCEDURE_SCHEMA != 'INFORMATION_SCHEMA'),
	SQCS AS (
		SELECT SEQUENCE_SCHEMA, SEQUENCE_NAME, 'SEQUENCE', LAST_ALTERED
		FROM INFORMATION_SCHEMA.SEQUENCES
		WHERE SEQUENCE_SCHEMA != 'INFORMATION_SCHEMA'),
	STAGS AS (
		SELECT STAGE_SCHEMA, STAGE_NAME, 'STAGE', LAST_ALTERED
		FROM INFORMATION_SCHEMA.STAGES
		WHERE STAGE_SCHEMA != 'INFORMATION_SCHEMA')
    SELECT * FROM TBL      UNION
    SELECT * FROM FUNC     UNION
    SELECT * FROM FFS      UNION
    SELECT * FROM EXTT     UNION
    SELECT * FROM PIPES    UNION
    SELECT * FROM SQCS     UNION
    SELECT * FROM STAGS    UNION
    SELECT * FROM PROCEDURES
    ORDER BY 3, 2;

get_streams=SHOW STREAMS in {db}.*;
get_tasks=SHOW TASKS in {db}.*;


get_ddl=SELECT GET_DDL('{o_type}', '{o_name}{parameters}');
